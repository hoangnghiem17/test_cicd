name: CD-Prod Pipeline

permissions:
  actions: read
  contents: read

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: deploy-prod
    runs-on: ubuntu-latest
    environment:
      name: production  # FÃ¼r manuelles Approval im Environments

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Voller Git-Verlauf, um Tags abzufragen

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}

    - name: Pull Docker image (latest-tested)
      run: |
        docker pull ghcr.io/${{ github.repository }}/myapp:latest-tested

    - name: Read embedded commit SHA label (for logs/audit)
      run: |
        IMG=ghcr.io/${{ github.repository }}/myapp:latest-tested
        REV=$(docker inspect -f '{{ index .Config.Labels "org.opencontainers.image.revision" }}' $IMG)
        echo "Deploying image built from commit: $REV"

    - name: Start prod container (smoke test)
      run: |
        docker run -d --name prod-app -p 80:80 ghcr.io/${{ github.repository }}/myapp:latest-tested

    - name: Verify container started and produced logs
      run: |
        set -e
        # wait up to ~30s for first output line
        for i in {1..15}; do
          if docker logs prod-app 2>&1 | grep -E "Hello, CI/CD Pipeline!|Failed to fetch greeting"; then
            echo "Container produced output"; break
          fi
          sleep 2
        done
        # ensure container is still running
        docker ps --filter "name=prod-app" --filter "status=running" --format '{{.Names}}' | grep -q '^prod-app$'

    - name: Stop and remove prod container
      if: always()
      run: docker rm -f prod-app || true
